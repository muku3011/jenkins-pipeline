/* Declarative pipeline
    - Added after a scripted pipeline to decrease the learning curve
    - Easier to get started, but not that powerful
*/

// Global variable
def gv

pipeline {  // must be the top level
    
    agent { // where to execute
        docker {
            image 'katalonstudio/katalon'
        }
    }

    // Access tools for your project
    // Gradle, maven, and JDK supported for now
/*     tools {
        //maven 'Maven' // Needs to be defined in Jenkins GUI
    } */

    /* Parameterized your build, types of parameters supported
        - string (name, defaultValue, description)
        - choice (name, choices, description)
    */    
    parameters {
        //string(name: 'VERSION', defaultValue: '', description: 'version to deploy in production')
        choice(name: 'buildType', choices: ['Backend Project Changes','Katalon Project Changes'], description: 'Request from katalon or backend project')
        booleanParam(name: 'executeTest', defaultValue: true, description: 'Need to execute test ?')
    }

    environment {
        NEW_VERSION = '1.3.0'
        //SERVER_CREDENTIALS = credentials('server-credentials')
    }

    stages { // where the work happens, stage and steps
        stage('init') {
            steps {
                script {
                    gv = load "script.groovy"
                }
            }
        }

        stage('build') {

            when {  // pre-condition for step
                expression {
                    BRANCH_NAME == 'master'
                }
            }

            steps {
                script {
                    gv.buildApp()
                }
            } 
        }

        stage('test') {
            when {  // pre-condition for step
                expression {
                    params.executeTests
                }
            }

            steps {
                script {
                    gv.testApp()
                }
            }
        }

        stage('deploy') {
            steps {
                script {
                    gv.deployApp()
                }
            }
        }
    }

    post {
        always {
            // always performed
            echo 'post-always'
        }
        success {
            // performed after all stages are completed successfully
            echo 'post success'
        }
        failure {
            // performed if any stage failed
            echo 'post failure'
        }
    }
} 


/* Using credentials in Jenkinsfile
    1. Define credentials in Jenkins GUI
    2. "credentials("credential-id")" bind the credentials to your environment variable
    3. For that you need "Credentials Binding" Plugin
*/